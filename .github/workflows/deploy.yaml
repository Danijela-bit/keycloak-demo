name: Deploy Infrastructure and App

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy Azure VM and Application
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

      - name: Terraform Apply
        id: apply
        working-directory: ./terraform
        run: |
          terraform apply -auto-approve
        env:
          TF_VAR_client_id: ${{ secrets.AZURE_CLIENT_ID }}
          TF_VAR_client_secret: ${{ secrets.AZURE_CLIENT_SECRET }}
          TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          TF_VAR_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
          TF_VAR_virtual_machine_admin_username: ${{ secrets.VM_ADMIN_USERNAME }}
          TF_VAR_public_key: ${{ secrets.SSH_PUBLIC_KEY }}

      - name: Get VM Public IP
        id: ip
        working-directory: ./terraform
        run: |
          echo "PUBLIC_IP=$(terraform output -raw public_ip)" >> $GITHUB_ENV

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ env.PUBLIC_IP }} >> ~/.ssh/known_hosts

      - name: Install Ansible
        run: sudo apt update && sudo apt install -y ansible sshpass

      - name: Copy files to Azure VM
        run: |
          rsync -av -e "ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa" ./ansible/ ${{ secrets.VM_ADMIN_USERNAME }}@${{ env.PUBLIC_IP }}:/tmp/ansible/
          rsync -av -e "ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa" ./docker/docker-compose* ${{ secrets.VM_ADMIN_USERNAME }}@${{ env.PUBLIC_IP }}:/tmp/docker/
          rsync -av -e "ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa" ./docker/nginx/ ${{ secrets.VM_ADMIN_USERNAME }}@${{ env.PUBLIC_IP }}:/tmp/docker/nginx/

      - name: Run Ansible Playbook
        uses: dawidd6/action-ansible-playbook@v2
        with:
          playbook: ansible/start-playbook.yaml
          #inventory: |
            #  [default]
            # ${{ env.PUBLIC_IP }} ansible_user=${{ secrets.ANSIBLE_SSH_USER }} ansible_ssh_private_key_file=~/.ssh/id_rsa
          extra_vars: |
            public_ip=${{ env.PUBLIC_IP }}
            keycloak_admin_user=${{ secrets.KEYCLOAK_ADMIN_USER }}
            keycloak_admin_pass=${{ secrets.KEYCLOAK_ADMIN_PASS }}
            docker_compose_version: "2.36.2"
            compose_dir: "/opt/app"
            KC_BOOTSTRAP_ADMIN_USERNAME=${{ secrets.KC_BOOTSTRAP_ADMIN_USERNAME }}
            KC_BOOTSTRAP_ADMIN_PASSWORD=${{ secrets.KC_BOOTSTRAP_ADMIN_PASSWORD }}
            KC_DB_USERNAME=${{ secrets.KC_DB_USERNAME }}
            KC_DB_PASSWORD=${{ secrets.KC_DB_PASSWORD }}
            KC_HOSTNAME=${{ env.PUBLIC_IP }}
            KC_HOSTNAME_URL=http://${{ env.PUBLIC_IP }}:8080
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
