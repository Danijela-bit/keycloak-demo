---
- name: Deploy Docker Compose stack on Azure VM
  hosts: all
  become: true

  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install required packages
      apt:
        name: ['apt-transport-https', 'ca-certificates', 'curl', 'gnupg', 'lsb-release']
        state: present
        update_cache: yes

    - name: Create keyrings directory
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Download Docker GPG key
      get_url:
        url: https://download.docker.com/linux/ubuntu/gpg
        dest: /etc/apt/keyrings/docker.asc
        mode: '0644'

    - name: Add Docker APT repository
      shell: |
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] \
        https://download.docker.com/linux/ubuntu \
        $(. /etc/os-release && echo \"${UBUNTU_CODENAME:-$VERSION_CODENAME}\") stable" | \
        tee /etc/apt/sources.list.d/docker.list > /dev/null
      args:
        executable: /bin/bash

    - name: Update apt cache after adding Docker repo
      apt:
        update_cache: yes

    - name: Install Docker
      apt:
        name: ['docker-ce', 'docker-ce-cli', 'containerd.io']
        state: present
        update_cache: yes

    - name: Generate OAUTH2_PROXY_COOKIE_SECRET
      shell: "openssl rand -base64 32 | tr -- '+/' '-_'"
      register: cookie_secret_raw
      changed_when: false

    - name: Strip newline from generated cookie secret
      set_fact:
        cookie_secret: "{{ cookie_secret_raw.stdout | trim }}"

    - name: Ensure env variable KC_HOSTNAME_URL in .env file exists or is updated
      lineinfile:
        path: /tmp/docker/.env
        regexp: '^OAUTH2_PROXY_COOKIE_SECRET='
        line: "OAUTH2_PROXY_COOKIE_SECRET={{ cookie_secret }}"
        create: yes
        insertafter: EOF

    - name: Install Docker Compose
      apt:
        name: 
          - docker-compose
        state: present

    - name: Ensure env variable KC_HOSTNAME in .env file exists or is updated
      lineinfile:
        path: /tmp/docker/.env
        regexp: '^KC_HOSTNAME='
        line: "KC_HOSTNAME={{ public_ip }}"
        create: yes
        insertafter: EOF

    - name: Ensure env variable KC_HOSTNAME_URL in .env file exists or is updated
      lineinfile:
        path: /tmp/docker/.env
        regexp: '^KC_HOSTNAME_URL='
        line: "KC_HOSTNAME_URL=http://{{ public_ip }}:8080"
        create: yes
        insertafter: EOF

    - name: Ensure env variable PUBLIC_IP in .env file exists or is updated
      lineinfile:
        path: /tmp/docker/.env
        regexp: '^PUBLIC_IP='
        line: "PUBLIC_IP={{ public_ip }}"
        create: yes
        insertafter: EOF

    - name: Set .env variables
      lineinfile:
        path: /tmp/docker/.env
        line: "{{ item.key }}={{ item.value }}"
        create: yes
        insertafter: EOF
      loop: "{{ env_vars | dict2items }}"
      vars:
        env_vars:
          POSTGRES_USER: "{{ POSTGRES_USER }}"
          POSTGRES_PASSWORD: "{{ POSTGRES_PASSWORD }}"
          KC_BOOTSTRAP_ADMIN_USERNAME: "{{ KC_BOOTSTRAP_ADMIN_USERNAME }}"
          KC_BOOTSTRAP_ADMIN_PASSWORD: "{{ KC_BOOTSTRAP_ADMIN_PASSWORD }}"
          KC_DB_USERNAME: ${{ KC_DB_USERNAME }}
          KC_DB_PASSWORD: "{{ KC_DB_PASSWORD }}"
          KC_HOSTNAME: "{{ KC_HOSTNAME }}"
          KC_HOSTNAME_URL: "{{ KC_HOSTNAME_URL }}"
          PUBLIC_IP: "{{ public_ip }}"

    - name: Start Keycloak stack
      community.docker.docker_compose_v2:
        project_src: "/tmp/docker/"
        files:
          - docker-compose-keycloak.yaml
        state: present
        remove_orphans: false

    - name: Wait for Keycloak to be healthy
      uri:
        url: http://localhost:8080/realms/master
        method: GET
        status_code: 200
      register: result
      retries: 15
      delay: 5
      until: result.status == 200

    - name: Configure Keycloak with Ansible vars
      shell: |
        docker exec \
          -e KEYCLOAK_USER={{ keycloak_admin_user }} \
          -e KEYCLOAK_PASS={{ keycloak_admin_pass }} \
          keycloak \
          bash -c 'cd /opt/keycloak/bin && \
          ./kcadm.sh config credentials --server http://localhost:8080 --realm master --user "$KEYCLOAK_USER" --password "$KEYCLOAK_PASS" && \
          ./kcadm.sh update realms/master -s sslRequired=NONE'
      args:
        executable: /bin/bash

    - name: Create Keycloak client
      shell: |
        docker exec keycloak bash -c '
        /opt/keycloak/bin/kcadm.sh config credentials --server http://localhost:8080 --realm master --user "$KEYCLOAK_USER" --password "$KEYCLOAK_PASS"

        if ! /opt/keycloak/bin/kcadm.sh get clients -r master -q clientId=nginx-client | grep -q "\"clientId\".*\"nginx-client\""; then
          echo "Client nginx-client does not exist. Creating..."
          /opt/keycloak/bin/kcadm.sh create clients -r master \
            -s clientId=nginx-client \
            -s enabled=true \
            -s publicClient=false \
            -s rootUrl=http://{{ public_ip }} \
            -s adminUrl=http://{{ public_ip }} \
            -s "redirectUris=[\"http://{{ public_ip }}/oauth2/callback\"]" \
            -s "webOrigins=[\"http://{{ public_ip }}\"]"
        else
          echo "Client nginx-client already exists. Skipping creation."
        fi
        '
      register: client_create
      changed_when: "'Created' in client_create.stdout"

    - name: Get client secret from Keycloak using kcreg.sh
      shell: |
        docker exec \
          -e KEYCLOAK_USER={{ keycloak_admin_user }} \
          -e KEYCLOAK_PASS={{ keycloak_admin_pass }} \
          keycloak \
          bash -c 'cd /opt/keycloak/bin && \
          ./kcreg.sh config credentials --server http://localhost:8080 --realm master --user "$KEYCLOAK_USER" --password "$KEYCLOAK_PASS" && \
          ./kcreg.sh get nginx-client | grep "\"secret\" :"'
      register: raw_secret_output

    - name: Extract just the secret string
      set_fact:
        client_secret: "{{ raw_secret_output.stdout | regex_search('\"secret\"[ ]*:[ ]*\"([^\"]+)\"', '\\1') | first }}"

    - name: Append client secret to existing .env file
      lineinfile:
        path: /tmp/docker/.env
        line: "OAUTH2_PROXY_CLIENT_SECRET={{ client_secret }}"
        create: yes
        state: present
        insertafter: EOF
        mode: '0600'

    - name: Start NGINX stack
      community.docker.docker_compose_v2:
        project_src: "/tmp/docker/"
        files:
          - docker-compose-nginx.yaml
        state: present
        remove_orphans: false



